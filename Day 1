

print("Hello, world!")
print(1 + 2)
a= 4 + 5
print (a)
my_var=a+3
print (my_var)
# Create variables
num_years = 4
days_per_year = 365 
hours_per_day = 24
mins_per_hour = 60
secs_per_min = 60

# Calculate number of seconds in four years
total_secs = secs_per_min * mins_per_hour * hours_per_day * days_per_year * num_years
print(total_secs)
# Update to include leap years
days_per_year = 365.25

# Calculate number of seconds in four years
total_secs = secs_per_min * mins_per_hour * hours_per_day * days_per_year * num_years
print(total_secs)
print(hours_per_day)

#define a function that adds three to inout variable

def add_three(input_var):
    output_var= input_var+3
    return output_var

print (add_three(3))

new_number= add_three(10)
print (new_number)

def get_pay(num_hours):
    pay_pre = 15*(num_hours)
    pay_post = pay_pre*(1-0.12)
    return pay_post
print (get_pay(14))

full_pay = get_pay(40)

print (full_pay)

pay_parttime = get_pay(32)

print (pay_parttime)

def get_pay_with_moreinputs(num_hours, hourly_wage, tax):
    pre_tax_pay = num_hours*hourly_wage
    post_tax_pay = pre_tax_pay*(1-tax)
    return post_tax_pay

print (get_pay_with_moreinputs(3, 15, 0.12))

print (get_pay_with_moreinputs(40, 24, .22))

# TODO: Complete the function
def get_expected_cost(beds, baths):
    value = (8000 + beds*30000 + baths*10000)
    return value

the_home = get_expected_cost(3, 3)
print (the_home)

# TODO: Use the get_expected_cost function to fill in each value
option_one = get_expected_cost(2, 3)
option_two = get_expected_cost(3, 2)
option_three = get_expected_cost(3, 3)
option_four = get_expected_cost(3, 4)

print(option_one)
print(option_two)
print(option_three)
print(option_four)

# TODO: Finish defining the function
def get_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon):
    cost = ((sqft_walls+sqft_ceiling)/sqft_per_gallon)*cost_per_gallon
    return cost

project_cost = get_cost(432, 144, 400, 15)

print (project_cost)

import math

def get_actual_cost(sqft_walls, sqft_ceiling, sqft_per_gallon, cost_per_gallon):
    cost = ((sqft_walls + sqft_ceiling) / sqft_per_gallon) * cost_per_gallon
    final_cost = math.ceil(cost)
    return final_cost

print(get_actual_cost(432, 144, 400, 15))

## MODULE FOR PYTHON DATATYPES
#Integers
x = 14
print(x)
print(type(x))

#floats
nearly_pi = 3.141592653589793238462643383279502884197169399375105820974944
print(nearly_pi)
print(type(nearly_pi))

almost_pi = 22/7
print(almost_pi)
print(type(almost_pi))

#One function that is particularly useful for fractions is the round() function. It lets you round a number to a specified number of decimal places.

# Round to 5 decimal places
rounded_pi = round(almost_pi, 5)
print(rounded_pi)
print(type(rounded_pi))

test_round = round(2.5734726496374636, 2)
print (test_round)

y_float = 1.
print(y_float)
print(type(y_float))

#Booleans
#Booleans represent one of two values: True or False. In the code cell below, z_one is set to a boolean with value True
z_one = True
print(z_one)
print(type(z_one))

z_two = False
print (z_two)
print (type(z_two))

z_three = (1>2)
print(z_three)
print(type(z_three))

z_four = (5 < 3)
print(z_four)
print(type(z_four))

z_five = not z_four
print(z_five)
print(type(z_five))

#Strings, Commonly used to represent text

w = "Hello, Python!"
print(w)
print(type(w))
print(len(w))

my_number = "1.12321"
print(my_number)
print(type(my_number))

#Converting Strings to float
also_my_number = float(my_number)
print(also_my_number)
print(type(also_my_number))

new_string = "abc" + "def"
print(new_string)
print(type(new_string))

newest_string = "abc" * 3
print(newest_string)
print(type(newest_string))


y=1.
print(y)
print(type(y))

w = int(y)
print(w)
print(type(w))

print(int(1.2321))
print(int(1.747))
print(int(-3.94535))
print(int(-2.19774))

#CONDITIONS AND CONDITIONAL STATEMENTS

def evaluate_temp(temp):
    message = "Normal Temperature"
    if temp>37:
        message = "Fever!"
    return message
    
print (evaluate_temp(32))

def evaluate_temp_withelse(temp):
    if temp>38:
        message = "Fever!"
    else: message = "Normal Temperature"
    return message

print(evaluate_temp_withelse(39))

def evaluate_temp_with_elif(temp):
    if temp > 38:
        message = "Fever!"
    elif temp > 35:
        message = "Normal temperature."
    else:
        message = "Low temperature."
    return message

#Everyone earning less than 12,000 pays 25% in taxes, and anyone earning 12,000 or more pays 30%. The function below calculates how much tax is owed.

def get_taxes(earnings):
    if earnings<12000:
        tax = 0.25*earnings
    elif earnings>12000:
        tax = 0.30*earnings
    return tax
ana_taxes = get_taxes(9000)
bob_taxes = get_taxes(15000)

print(ana_taxes)
print(bob_taxes)

##Multiple elif in a code
def get_dose(weight):
    # Dosage is 1.25 ml for anyone under 5.2 kg
    if weight < 5.2:
        dose = 1.25
    elif weight < 7.9:
        dose = 2.5
    elif weight < 10.4:
        dose = 3.75
    elif weight < 15.9:
        dose = 5
    elif weight < 21.2:
        dose = 7.5
    # Dosage is 10 ml for anyone 21.2 kg or over
    else:
        dose = 10
    return dose

print(get_dose(12))

##Practice Questions for Conditions

def get_grade(score):
    if score<60:
        grade = "F"
    elif score<70:
        grade = "D"
    elif score<80:
        grade = "C"
    elif score<90:
        grade = "B"
    elif score<100:
        grade = "A"
    return grade

#LISTS
#Python Strings
flowers = "pink primrose,hard-leaved pocket orchid,canterbury bells,sweet pea,english marigold,tiger lily,moon orchid,bird of paradise,monkshood,globe thistle"

print(type(flowers))
print(flowers)

#Turning Strings into lists
flowers_list = ["pink primrose", "hard-leaved pocket orchid", "canterbury bells", "sweet pea", "english marigold", "tiger lily", "moon orchid", "bird of paradise", "monkshood", "globe thistle"]

print(type(flowers_list))
print(flowers_list)

# The list has ten entries
print(len(flowers_list))

print("First entry:", flowers_list[0])
print("Second entry:", flowers_list[1])

# The list has length ten, so we refer to final entry with 9
print("Last entry:", flowers_list[9])

print ("First three entries: ", flowers_list[:3])

flowers_list.remove("globe thistle")
print(flowers_list)

flowers_list.append("snapdragon")
print(flowers_list)

#Lists are not just for strings
hardcover_sales = [139, 128, 172, 139, 191, 168, 170]

print("Length of the list:", len(hardcover_sales))
print("Entry at index 2:", hardcover_sales[2])

print("Minimum:", min(hardcover_sales))
print("Maximum:", max(hardcover_sales))

print("Average books sold in first five days:", ((sum(hardcover_sales[:5]))/5))

## Number of Customers 
num_customers = [137, 147, 135, 128, 170, 174, 165, 146, 126, 159,
                 141, 148, 132, 147, 168, 153, 170, 161, 148, 152,
                 141, 151, 131, 149, 164, 163, 143, 143, 166, 171]
avg_first_seven = (sum(num_customers[:7]))/7
avg_last_seven = (sum(num_customers[-7:]))/7
max_month = max(num_customers)
min_month = min(num_customers)

#list comprehensions
test_ratings = [1, 2, 3, 4, 5]
test_liked = [i>=4 for i in test_ratings]
print(test_liked)




